/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* 
   SWIGTEMPLATEDISAMBIGUATOR is needed when wrapping template calls
   (cwrap.c:Swig_cfunction_call/Swig_cmethod_call), as in

     result = nspace::template function<int >(arg1);
     result = arg1->template method<int >(arg2);

    SWIGTEMPLATEDISAMBIGUATOR is compiler dependent (common.swg),
      - SUN Studio requires 'template', 
      - gcc-3.4 forbids the use of 'template'.
      - gcc-3.2.3 produces internal errors if you use 'template'
*/
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attritbute passed for some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* how we export a method such that it can go in to a shared or dll library */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(_MSC_VER) || defined(__GNUC__)
#     if defined(STATIC_LINKED)
#       define SWIGEXPORT(a) a
#     else
#       define SWIGEXPORT(a) __declspec(dllexport) a
#     endif
#   else
#     if defined(__BORLANDC__)
#       define SWIGEXPORT(a) a _export
#     else
#       define SWIGEXPORT(a) a
#     endif
#   endif
# else
#   define SWIGEXPORT(a) a
# endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DibSect swig_types[0]
#define SWIGTYPE_p_HMENU swig_types[1]
#define SWIGTYPE_p_HWND swig_types[2]
#define SWIGTYPE_p_allocator_type swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_difference_type swig_types[5]
#define SWIGTYPE_p_int swig_types[6]
#define SWIGTYPE_p_long swig_types[7]
#define SWIGTYPE_p_size_type swig_types[8]
#define SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t swig_types[9]
#define SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type swig_types[10]
#define SWIGTYPE_p_unsigned_int swig_types[11]
#define SWIGTYPE_p_unsigned_long swig_types[12]
#define SWIGTYPE_p_value_type swig_types[13]
#define SWIGTYPE_ptrdiff_t swig_types[14]
#define SWIGTYPE_size_t swig_types[15]
#define SWIGTYPE_std__ptrdiff_t swig_types[16]
#define SWIGTYPE_std__size_t swig_types[17]
static swig_type_info *swig_types[18];
static swig_module_info swig_module = {swig_types, 18, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _guitest.so
  ------------------------------------------------*/
#define SWIG_init    init_guitest

#define SWIG_name    "_guitest"

#include <windows.h>
#include <commctrl.h>
#include "GUITest.cpp"
#include "dibsect.h"
#include "dibsect.cpp"


#include <iostream>  


#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif
#include <stdexcept>


  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#define SWIG_STD_NOINSERT_TEMPLATE_STL
#endif



#include <string>
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


SWIGINTERN void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <string>


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }


SWIGINTERN int
  SWIG_AsVal_std_string(PyObject* obj, std::string *val)
  {
    std::string* s;
    int res = SWIG_AsPtr_std_string(obj, &s);
    if ((res != 0) && s) {
      if (val) *val = *s;
      if (res == SWIG_NEWOBJ) delete s;
      return res;
    }
    if (val) {
      PyErr_SetString(PyExc_TypeError,"a string is expected");
    }
    return 0;
  }


SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return Py_None;    
  } else {
    return PyString_FromStringAndSize(carray, (int)(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) != -1) 
	? SWIG_OLDOBJ : 0;
      if (res) {
	if (val) {
	  *val = p;
	}
      } else {
	SWIG_type_error(type_name<Type>(), obj);
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static bool asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if ((res != 0) && p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (res == SWIG_NEWOBJ) delete p;
	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0)) ? true : false;
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static bool asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj, &p);
        if (res) {
          *(const_cast<noconst_type**>(val)) = p;
     	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0)) ? true : false;
      }
    }
  };
  
  template <class Type>
  inline bool asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val) ? true : false;
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      if (!obj || !asval(obj, &v)) {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res && v) {
	if (res == SWIG_NEWOBJ) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      return obj && asval(obj, (Type *)(0));
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      return obj && asptr(obj, (Type **)(0));
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string(obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string(val);
    }
  };
}


  namespace swig {
    struct PyObject_var {
      PyObject* ptr;
      PyObject_var(PyObject* obj = 0) : ptr(obj) { }      
      ~PyObject_var() { if (ptr) Py_DECREF(ptr); }      
      operator PyObject*() { return ptr; }
      PyObject* operator->() const { return ptr; }
    };
  }


namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) 
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator 
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator 
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) { 
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    
    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    typename Sequence::iterator sb = self->begin();
    typename InputSeq::const_iterator vmid = v.begin();
    std::advance(sb,ii);
    std::advance(vmid, jj - ii);
    self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
  }
 
  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#include <iterator>
namespace swig
{
  template <class T> 
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index) 
      : _seq(seq), _index(index)
    {
    }

    operator T () const 
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	PyOS_snprintf(msg, sizeof(msg), "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<T>(), item);
	}
	SWIG_append_errmsg(msg);
	SWIG_append_errmsg(e.what());
	throw;
      }
    }
    
    PySequence_Ref& operator=(const T& v) 
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }
    
  private:
    PyObject* _seq;
    int _index;
  };

  template <class T> 
  struct PySequence_ArrowProxy 
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };    

  template <class T, class Reference > 
  struct PySequence_Iter
  {
    typedef PySequence_Iter<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_Iter()
    {
    }

    PySequence_Iter(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    { 
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const 
    { 
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const 
    {
      return !(operator==(ri));
    }    

    self& operator ++ ()
    {
      ++_index;      
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n) 
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n) 
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }    

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    reference 
    operator[](difference_type n) const 
    { 
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    int _index;
  }; 

  template <class T> 
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_Iter<T, reference> iterator;
    typedef PySequence_Iter<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont() 
    {
      if (_seq) Py_DECREF(_seq);
    }

    size_type size() const
    {
      return PySequence_Size(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }    

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }
    
    iterator end()
    {
      return iterator(_seq, size());
    }
    
    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }    

    reference operator[](difference_type n) 
    { 
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    { 
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    PyOS_snprintf(msg, sizeof(msg), "in sequence element %d", i);
	    SWIG_type_error(swig::type_name<value_type>(), item);
	    SWIG_append_errmsg(msg);
	  }
	  return 0;
	}
      }
      return 1;  
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <class PySeq, class Seq> 
    static inline void
    assign(const PySeq& pyseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
      typedef typename PySeq::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
#else
      seq->assign(pyseq.begin(), pyseq.end());
#endif
    }

    template <class Seq, class T = typename Seq::value_type >
    struct traits_asptr_stdseq {
      typedef Seq sequence;
      typedef T value_type;
		    
      static int asptr(PyObject *obj, sequence **seq) {
	if (PySequence_Check(obj)) {
	  try {
	    PySequence_Cont<value_type> pyseq(obj);
	    if (seq) {
	      sequence *pseq = new sequence();
	      assign(pyseq, pseq);
	      *seq = pseq;
	      return SWIG_NEWOBJ;
	    } else {
	      return pyseq.check();
	    }
	  } catch (std::exception& e) {
	    if (seq) {
	      if (!PyErr_Occurred())
		PyErr_SetString(PyExc_TypeError, e.what());
	    }
	    return 0;
	  }
	} else {
	  sequence *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) != -1) {
	    if (seq) *seq = p;
	    return 1;
	  }
	}
	if (seq) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<sequence>());
	}
	return 0;	  
      }
    };

    template <class Seq, class T = typename Seq::value_type >
    struct traits_from_stdseq {
      typedef Seq sequence;
      typedef T value_type;
      typedef typename Seq::size_type size_type;
      typedef typename sequence::const_iterator const_iterator;

      static PyObject *from(const sequence& seq) {
	size_type size = seq.size();
	if (size <= (size_type)INT_MAX) {
	  PyObject *obj = PyTuple_New((int)size);
	  int i = 0;
	  for (const_iterator it = seq.begin();
	       it != seq.end(); ++it, ++i) {
	    PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	  }
	  return obj;
	} else {
	  PyErr_SetString(PyExc_OverflowError,
			  "sequence size not valid in python");
	  Py_INCREF(Py_None);
	  return Py_None;
	}
      }
    };
  }


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator<std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator<std::string >" " >";
	  }
	};
      }
    

SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}

static bool std_vector_Sl_std_string_Sg____nonzero__(std::vector<std::string > const *self){
      return !(self->empty());
    }
static std::vector<std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector<std::string > const *self){
      return self->size();
    }
static std::vector<std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector<std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator<std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

static std::vector<std::string,std::allocator<std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_std_string_Sg____setslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j,std::vector<std::string,std::allocator<std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_std_string_Sg____delslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_std_string_Sg____delitem__(std::vector<std::string > *self,std::vector<std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem__(std::vector<std::string > const *self,std::vector<std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_std_string_Sg____setitem__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_std_string_Sg__append(std::vector<std::string > *self,std::vector<std::string >::value_type const &x){
      self->push_back(x);
    }

#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


SWIGINTERN PyObject*
t_output_helper(PyObject* target, PyObject* o) {
  if (!target) {
    target = o;
  } else if (target == Py_None) {  
    Py_DECREF(target);
    target = o;
  } else {
    if (!PyList_Check(target)) {
      PyObject *o2 = target;
      target = PyList_New(1);
      PyList_SetItem(target, 0, o2);
    }
    PyList_Append(target,o);
    }
  return target;
}



SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


#if UINT_MAX < LONG_MAX
/*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_VectorString__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_VectorString")) goto fail;
    result = (std::vector<std::string > *)new std::vector<std::string >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VectorString__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = 0 ;
    std::vector<std::string > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VectorString",&obj0)) goto fail;
    {
        std::vector<std::string,std::allocator<std::string > > *ptr = (std::vector<std::string,std::allocator<std::string > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >((std::vector<std::string > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_VectorString_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<std::string > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<std::string > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    SwigValueWrapper<std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<std::string > const *)arg1)->get_allocator();
    
    {
        std::vector<std::string >::allocator_type * resultptr;
        resultptr = new std::vector<std::string >::allocator_type((std::vector<std::string >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VectorString__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string >::size_type arg1 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VectorString",&obj0)) goto fail;
    {
        arg1 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VectorString__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string >::size_type arg1 ;
    std::vector<std::string >::value_type *arg2 = 0 ;
    std::vector<std::string > *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_VectorString",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_new_VectorString(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_VectorString__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_VectorString__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
        if (_v) {
            return _wrap_new_VectorString__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_VectorString__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_VectorString'");
    return NULL;
}


static PyObject *_wrap_VectorString_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->push_back((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_VectorString_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<std::string >::value_type const &_result_ref = ((std::vector<std::string > const *)arg1)->front();
        result = (std::vector<std::string >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<std::string >::value_type const &_result_ref = ((std::vector<std::string > const *)arg1)->back();
        result = (std::vector<std::string >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    std::vector<std::string >::value_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VectorString_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    (arg1)->assign(arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_VectorString_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    std::vector<std::string >::value_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VectorString_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    (arg1)->resize(arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_VectorString_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_VectorString_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_VectorString_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VectorString_resize'");
    return NULL;
}


static PyObject *_wrap_VectorString_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<std::string > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector<std::string > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_std_string_Sg____len__((std::vector<std::string > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VectorString_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_std_string_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::difference_type arg3 ;
    std::vector<std::string,std::allocator<std::string > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VectorString___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<std::string,std::allocator<std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::difference_type arg3 ;
    std::vector<std::string,std::allocator<std::string > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:VectorString___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<std::string,std::allocator<std::string > > *ptr = (std::vector<std::string,std::allocator<std::string > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string,std::allocator<std::string > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector<std::string,std::allocator<std::string > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_VectorString___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VectorString___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<std::string >::value_type const &_result_ref = std_vector_Sl_std_string_Sg____getitem__((std::vector<std::string > const *)arg1,arg2);
                result = (std::vector<std::string >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorString___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::value_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VectorString___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,(std::string const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_VectorString_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorString_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_delete_VectorString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_VectorString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * VectorString_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GetListViewContents(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    std::vector<std::string,std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetListViewContents",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetListViewContents(arg1);
    
    {
        resultobj = swig::from((std::vector<std::string,std::allocator<std::string > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelListViewItem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    BOOL arg3 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SelListViewItem",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (BOOL)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (BOOL)SelListViewItem(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelListViewItem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelListViewItem",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (BOOL)SelListViewItem(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelListViewItem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_HWND, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_SelListViewItem__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_HWND, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_SelListViewItem__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SelListViewItem'");
    return NULL;
}


static PyObject *_wrap_SelListViewItemText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL arg3 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SelListViewItemText",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (BOOL)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (BOOL)SelListViewItemText(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelListViewItemText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelListViewItemText",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (BOOL)SelListViewItemText(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelListViewItemText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_HWND, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_SelListViewItemText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_HWND, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_SelListViewItemText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SelListViewItemText'");
    return NULL;
}


static PyObject *_wrap_IsListViewItemSel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IsListViewItemSel",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (BOOL)IsListViewItemSel(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTabItems(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    std::vector<std::string,std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetTabItems",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetTabItems(arg1);
    
    {
        resultobj = swig::from((std::vector<std::string,std::allocator<std::string > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelTabItem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelTabItem",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (BOOL)SelTabItem(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelTabItemText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelTabItemText",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (BOOL)SelTabItemText(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsTabItemSel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IsTabItemSel",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (BOOL)IsTabItemSel(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelTreeViewItemPath(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelTreeViewItemPath",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (BOOL)SelTreeViewItemPath(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTreeViewSelPath(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetTreeViewSelPath",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (char *)GetTreeViewSelPath(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetCursorPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int temp1 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = 0 ;
    
    arg1 = &temp1; res1 = SWIG_NEWOBJ;
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)":GetCursorPos")) goto fail;
    GetCursorPos(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res1 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg1)) : SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendLButtonUp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":SendLButtonUp")) goto fail;
    SendLButtonUp();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendLButtonDown(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":SendLButtonDown")) goto fail;
    SendLButtonDown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendMButtonUp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":SendMButtonUp")) goto fail;
    SendMButtonUp();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendMButtonDown(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":SendMButtonDown")) goto fail;
    SendMButtonDown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendRButtonUp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":SendRButtonUp")) goto fail;
    SendRButtonUp();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendRButtonDown(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":SendRButtonDown")) goto fail;
    SendRButtonDown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendMouseMoveRel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SendMouseMoveRel",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SendMouseMoveRel(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendMouseMoveAbs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SendMouseMoveAbs",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SendMouseMoveAbs(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseMoveAbsPix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MouseMoveAbsPix",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    MouseMoveAbsPix(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MouseMoveWheel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DWORD arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MouseMoveWheel",&obj0)) goto fail;
    {
        arg1 = (DWORD)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    MouseMoveWheel(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendKeysImp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SendKeysImp",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SendKeysImp(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetDesktopWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND result;
    
    if(!PyArg_ParseTuple(args,(char *)":GetDesktopWindow")) goto fail;
    result = GetDesktopWindow();
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    UINT arg2 ;
    HWND result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetWindow",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (UINT)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GetWindow(arg1,arg2);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetWindowText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetWindowText",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (char *)GetWindowText(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetClassName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetClassName",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (char *)GetClassName(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetParent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetParent",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetParent(arg1);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetWindowLong(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetWindowLong",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (long)GetWindowLong(arg1,arg2);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetForegroundWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SetForegroundWindow",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)SetForegroundWindow(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetFocus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SetFocus",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = MySetFocus(arg1);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetChildWindows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int *arg2 = (int *) 0 ;
    HWND *result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    
    {
        arg2 = &temp2;
    }
    if(!PyArg_ParseTuple(args,(char *)"O:GetChildWindows",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (HWND *)GetChildWindows(arg1,arg2);
    
    {
        resultobj = PyList_New(*arg2);
        for (int i=0; i< *arg2; ++i)
        PyList_SetItem(resultobj, i, PyLong_FromLong(long(result[i])));
        free(result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTopLevelWindows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    HWND *result;
    int temp1 ;
    
    {
        arg1 = &temp1;
    }
    if(!PyArg_ParseTuple(args,(char *)":GetTopLevelWindows")) goto fail;
    result = (HWND *)GetTopLevelWindows(arg1);
    
    {
        resultobj = PyList_New(*arg1);
        for (int i=0; i< *arg1; ++i)
        PyList_SetItem(resultobj, i, PyLong_FromLong(long(result[i])));
        free(result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WMGetText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WMGetText",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (char *)WMGetText(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WMSetText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WMSetText",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (int)WMSetText(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsChild(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IsChild",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (HWND) PyLong_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)IsChild(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetChildDepth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND arg2 ;
    DWORD result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetChildDepth",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (HWND) PyLong_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (DWORD)GetChildDepth(arg1,arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendMessage(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    UINT arg2 ;
    WPARAM arg3 ;
    LPARAM arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:SendMessage",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (UINT)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (WPARAM)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (LPARAM)(SWIG_As_long(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (int)SendMessage(arg1,arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PostMessage(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    UINT arg2 ;
    WPARAM arg3 ;
    LPARAM arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:PostMessage",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (UINT)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (WPARAM)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (LPARAM)(SWIG_As_long(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (int)PostMessage(arg1,arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckButton(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CheckButton",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    CheckButton(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnCheckButton(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnCheckButton",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    UnCheckButton(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GrayOutButton(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GrayOutButton",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    GrayOutButton(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsCheckedButton(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IsCheckedButton",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)IsCheckedButton(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsGrayedButton(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IsGrayedButton",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)IsGrayedButton(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IsWindow",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)IsWindow(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenToClient(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    int arg3 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"OOO:ScreenToClient",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ScreenToClient(arg1,arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClientToScreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    int arg3 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"OOO:ClientToScreen",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ClientToScreen(arg1,arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetCaretPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"O:GetCaretPos",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    GetCaretPos(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetFocus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetFocus",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetFocus(arg1);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetActiveWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetActiveWindow",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetActiveWindow(arg1);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetForegroundWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND result;
    
    if(!PyArg_ParseTuple(args,(char *)":GetForegroundWindow")) goto fail;
    result = GetForegroundWindow();
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetActiveWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SetActiveWindow",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = MySetActiveWindow(arg1);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EnableWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EnableWindow",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (BOOL)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (BOOL)EnableWindow(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsWindowEnabled(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IsWindowEnabled",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)IsWindowEnabled(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsWindowVisible(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IsWindowVisible",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (BOOL)IsWindowVisible(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ShowWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ShowWindow",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (BOOL)MyShowWindow(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreenToNorm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreenToNorm",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ScreenToNorm(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NormToScreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"OO:NormToScreen",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    NormToScreen(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetScreenRes(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int temp1 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = 0 ;
    
    arg1 = &temp1; res1 = SWIG_NEWOBJ;
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)":GetScreenRes")) goto fail;
    GetScreenRes(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res1 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg1)) : SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetWindowRect(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int temp2 ;
    int res2 = 0 ;
    int temp3 ;
    int res3 = 0 ;
    int temp4 ;
    int res4 = 0 ;
    int temp5 ;
    int res5 = 0 ;
    PyObject * obj0 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    arg4 = &temp4; res4 = SWIG_NEWOBJ;
    arg5 = &temp5; res5 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"O:GetWindowRect",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    GetWindowRect(arg1,arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res4 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg4)) : SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, 0)));
    resultobj = t_output_helper(resultobj, ((res5 == SWIG_NEWOBJ) ?
    SWIG_From_int((*arg5)) : SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetComboText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetComboText",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (char *)GetComboText(arg1,arg2);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetListText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetListText",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (char *)GetListText(arg1,arg2);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetComboContents(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    std::vector<std::string,std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetComboContents",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetComboContents(arg1);
    
    {
        resultobj = swig::from((std::vector<std::string,std::allocator<std::string > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelComboItem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelComboItem",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (BOOL)SelComboItem(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SelComboItemText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    char *arg2 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SelComboItemText",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (BOOL)SelComboItemText(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetListContents(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    std::vector<std::string,std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetListContents",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetListContents(arg1);
    
    {
        resultobj = swig::from((std::vector<std::string,std::allocator<std::string > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IsKeyPressed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IsKeyPressed",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (BOOL)IsKeyPressed(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSubMenu(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HMENU arg1 ;
    int arg2 ;
    HMENU result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetSubMenu",&obj0,&obj1)) goto fail;
    {
        arg1 = (HMENU) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GetSubMenu(arg1,arg2);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetMenuItemInfo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HMENU arg1 ;
    UINT arg2 ;
    std::vector<std::string,std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetMenuItemInfo",&obj0,&obj1)) goto fail;
    {
        arg1 = (HMENU) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (UINT)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GetMenuItemInfo(arg1,arg2);
    
    {
        resultobj = swig::from((std::vector<std::string,std::allocator<std::string > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetMenuItemCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HMENU arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetMenuItemCount",&obj0)) goto fail;
    {
        arg1 = (HMENU) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (int)GetMenuItemCount(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetMenuItemIndex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HMENU arg1 ;
    char *arg2 = (char *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetMenuItemIndex",&obj0,&obj1)) goto fail;
    {
        arg1 = (HMENU) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (int)GetMenuItemIndex(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSystemMenu(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL arg2 ;
    HMENU result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetSystemMenu",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (BOOL)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GetSystemMenu(arg1,arg2);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetMenuItemID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HMENU arg1 ;
    int arg2 ;
    UINT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetMenuItemID",&obj0,&obj1)) goto fail;
    {
        arg1 = (HMENU) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (UINT)GetMenuItemID(arg1,arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetMenu(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HMENU result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetMenu",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = GetMenu(arg1);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetWindowPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    HWND arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    UINT arg7 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:SetWindowPos",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (HWND) PyLong_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (UINT)(SWIG_As_unsigned_SS_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    result = (BOOL)SetWindowPos(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TabCtrl_SetCurFocus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TabCtrl_SetCurFocus",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    TabCtrl_SetCurFocus(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TabCtrl_GetCurFocus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TabCtrl_GetCurFocus",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (int)TabCtrl_GetCurFocus(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TabCtrl_SetCurSel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TabCtrl_SetCurSel",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)TabCtrl_SetCurSel(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TabCtrl_GetItemCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TabCtrl_GetItemCount",&obj0)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (int)TabCtrl_GetItemCount(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendRawKey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UINT arg1 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SendRawKey",&obj0,&obj1)) goto fail;
    {
        arg1 = (UINT)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SendRawKey(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WindowFromPoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    HWND result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WindowFromPoint",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = WindowFromPoint(arg1,arg2);
    
    {
        resultobj = PyLong_FromLong((long)result);
        if (PyErr_Occurred()) SWIG_fail;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AttachWin(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    HWND arg1 ;
    BOOL arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AttachWin",&obj0,&obj1)) goto fail;
    {
        arg1 = (HWND) PyLong_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg2 = (BOOL)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (BOOL)AttachWin(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DibSect(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DibSect")) goto fail;
    result = (DibSect *)new DibSect();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DibSect, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DibSect(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DibSect",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_Destroy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DibSect_Destroy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Destroy();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_Load(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DibSect_Load",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->Load((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_SaveAs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DibSect_SaveAs",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->SaveAs((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_Invert(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DibSect_Invert",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Invert();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_ToGrayScale(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DibSect_ToGrayScale",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->ToGrayScale();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_ToClipboard(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DibSect_ToClipboard",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->ToClipboard();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_CopyClient(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    HWND arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:DibSect_CopyClient",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (HWND) PyLong_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    result = (bool)(arg1)->CopyClient(arg2,arg3,arg4,arg5,arg6);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DibSect_CopyWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DibSect *arg1 = (DibSect *) 0 ;
    HWND arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DibSect_CopyWindow",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DibSect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (HWND) PyLong_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->CopyWindow(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DibSect_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DibSect, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"VectorString_empty", _wrap_VectorString_empty, METH_VARARGS, NULL},
	 { (char *)"VectorString_size", _wrap_VectorString_size, METH_VARARGS, NULL},
	 { (char *)"VectorString_clear", _wrap_VectorString_clear, METH_VARARGS, NULL},
	 { (char *)"VectorString_swap", _wrap_VectorString_swap, METH_VARARGS, NULL},
	 { (char *)"VectorString_get_allocator", _wrap_VectorString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorString_pop_back", _wrap_VectorString_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_VectorString", _wrap_new_VectorString, METH_VARARGS, NULL},
	 { (char *)"VectorString_push_back", _wrap_VectorString_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorString_front", _wrap_VectorString_front, METH_VARARGS, NULL},
	 { (char *)"VectorString_back", _wrap_VectorString_back, METH_VARARGS, NULL},
	 { (char *)"VectorString_assign", _wrap_VectorString_assign, METH_VARARGS, NULL},
	 { (char *)"VectorString_resize", _wrap_VectorString_resize, METH_VARARGS, NULL},
	 { (char *)"VectorString_reserve", _wrap_VectorString_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorString_capacity", _wrap_VectorString_capacity, METH_VARARGS, NULL},
	 { (char *)"VectorString___nonzero__", _wrap_VectorString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorString___len__", _wrap_VectorString___len__, METH_VARARGS, NULL},
	 { (char *)"VectorString_pop", _wrap_VectorString_pop, METH_VARARGS, NULL},
	 { (char *)"VectorString___getslice__", _wrap_VectorString___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorString___setslice__", _wrap_VectorString___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorString___delslice__", _wrap_VectorString___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorString___delitem__", _wrap_VectorString___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorString___getitem__", _wrap_VectorString___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorString___setitem__", _wrap_VectorString___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorString_append", _wrap_VectorString_append, METH_VARARGS, NULL},
	 { (char *)"delete_VectorString", _wrap_delete_VectorString, METH_VARARGS, NULL},
	 { (char *)"VectorString_swigregister", VectorString_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetListViewContents", _wrap_GetListViewContents, METH_VARARGS, NULL},
	 { (char *)"SelListViewItem", _wrap_SelListViewItem, METH_VARARGS, NULL},
	 { (char *)"SelListViewItemText", _wrap_SelListViewItemText, METH_VARARGS, NULL},
	 { (char *)"IsListViewItemSel", _wrap_IsListViewItemSel, METH_VARARGS, NULL},
	 { (char *)"GetTabItems", _wrap_GetTabItems, METH_VARARGS, NULL},
	 { (char *)"SelTabItem", _wrap_SelTabItem, METH_VARARGS, NULL},
	 { (char *)"SelTabItemText", _wrap_SelTabItemText, METH_VARARGS, NULL},
	 { (char *)"IsTabItemSel", _wrap_IsTabItemSel, METH_VARARGS, NULL},
	 { (char *)"SelTreeViewItemPath", _wrap_SelTreeViewItemPath, METH_VARARGS, NULL},
	 { (char *)"GetTreeViewSelPath", _wrap_GetTreeViewSelPath, METH_VARARGS, NULL},
	 { (char *)"GetCursorPos", _wrap_GetCursorPos, METH_VARARGS, NULL},
	 { (char *)"SendLButtonUp", _wrap_SendLButtonUp, METH_VARARGS, NULL},
	 { (char *)"SendLButtonDown", _wrap_SendLButtonDown, METH_VARARGS, NULL},
	 { (char *)"SendMButtonUp", _wrap_SendMButtonUp, METH_VARARGS, NULL},
	 { (char *)"SendMButtonDown", _wrap_SendMButtonDown, METH_VARARGS, NULL},
	 { (char *)"SendRButtonUp", _wrap_SendRButtonUp, METH_VARARGS, NULL},
	 { (char *)"SendRButtonDown", _wrap_SendRButtonDown, METH_VARARGS, NULL},
	 { (char *)"SendMouseMoveRel", _wrap_SendMouseMoveRel, METH_VARARGS, NULL},
	 { (char *)"SendMouseMoveAbs", _wrap_SendMouseMoveAbs, METH_VARARGS, NULL},
	 { (char *)"MouseMoveAbsPix", _wrap_MouseMoveAbsPix, METH_VARARGS, NULL},
	 { (char *)"MouseMoveWheel", _wrap_MouseMoveWheel, METH_VARARGS, NULL},
	 { (char *)"SendKeysImp", _wrap_SendKeysImp, METH_VARARGS, NULL},
	 { (char *)"GetDesktopWindow", _wrap_GetDesktopWindow, METH_VARARGS, NULL},
	 { (char *)"GetWindow", _wrap_GetWindow, METH_VARARGS, NULL},
	 { (char *)"GetWindowText", _wrap_GetWindowText, METH_VARARGS, NULL},
	 { (char *)"GetClassName", _wrap_GetClassName, METH_VARARGS, NULL},
	 { (char *)"GetParent", _wrap_GetParent, METH_VARARGS, NULL},
	 { (char *)"GetWindowLong", _wrap_GetWindowLong, METH_VARARGS, NULL},
	 { (char *)"SetForegroundWindow", _wrap_SetForegroundWindow, METH_VARARGS, NULL},
	 { (char *)"SetFocus", _wrap_SetFocus, METH_VARARGS, NULL},
	 { (char *)"GetChildWindows", _wrap_GetChildWindows, METH_VARARGS, NULL},
	 { (char *)"GetTopLevelWindows", _wrap_GetTopLevelWindows, METH_VARARGS, NULL},
	 { (char *)"WMGetText", _wrap_WMGetText, METH_VARARGS, NULL},
	 { (char *)"WMSetText", _wrap_WMSetText, METH_VARARGS, NULL},
	 { (char *)"IsChild", _wrap_IsChild, METH_VARARGS, NULL},
	 { (char *)"GetChildDepth", _wrap_GetChildDepth, METH_VARARGS, NULL},
	 { (char *)"SendMessage", _wrap_SendMessage, METH_VARARGS, NULL},
	 { (char *)"PostMessage", _wrap_PostMessage, METH_VARARGS, NULL},
	 { (char *)"CheckButton", _wrap_CheckButton, METH_VARARGS, NULL},
	 { (char *)"UnCheckButton", _wrap_UnCheckButton, METH_VARARGS, NULL},
	 { (char *)"GrayOutButton", _wrap_GrayOutButton, METH_VARARGS, NULL},
	 { (char *)"IsCheckedButton", _wrap_IsCheckedButton, METH_VARARGS, NULL},
	 { (char *)"IsGrayedButton", _wrap_IsGrayedButton, METH_VARARGS, NULL},
	 { (char *)"IsWindow", _wrap_IsWindow, METH_VARARGS, NULL},
	 { (char *)"ScreenToClient", _wrap_ScreenToClient, METH_VARARGS, NULL},
	 { (char *)"ClientToScreen", _wrap_ClientToScreen, METH_VARARGS, NULL},
	 { (char *)"GetCaretPos", _wrap_GetCaretPos, METH_VARARGS, NULL},
	 { (char *)"GetFocus", _wrap_GetFocus, METH_VARARGS, NULL},
	 { (char *)"GetActiveWindow", _wrap_GetActiveWindow, METH_VARARGS, NULL},
	 { (char *)"GetForegroundWindow", _wrap_GetForegroundWindow, METH_VARARGS, NULL},
	 { (char *)"SetActiveWindow", _wrap_SetActiveWindow, METH_VARARGS, NULL},
	 { (char *)"EnableWindow", _wrap_EnableWindow, METH_VARARGS, NULL},
	 { (char *)"IsWindowEnabled", _wrap_IsWindowEnabled, METH_VARARGS, NULL},
	 { (char *)"IsWindowVisible", _wrap_IsWindowVisible, METH_VARARGS, NULL},
	 { (char *)"ShowWindow", _wrap_ShowWindow, METH_VARARGS, NULL},
	 { (char *)"ScreenToNorm", _wrap_ScreenToNorm, METH_VARARGS, NULL},
	 { (char *)"NormToScreen", _wrap_NormToScreen, METH_VARARGS, NULL},
	 { (char *)"GetScreenRes", _wrap_GetScreenRes, METH_VARARGS, NULL},
	 { (char *)"GetWindowRect", _wrap_GetWindowRect, METH_VARARGS, NULL},
	 { (char *)"GetComboText", _wrap_GetComboText, METH_VARARGS, NULL},
	 { (char *)"GetListText", _wrap_GetListText, METH_VARARGS, NULL},
	 { (char *)"GetComboContents", _wrap_GetComboContents, METH_VARARGS, NULL},
	 { (char *)"SelComboItem", _wrap_SelComboItem, METH_VARARGS, NULL},
	 { (char *)"SelComboItemText", _wrap_SelComboItemText, METH_VARARGS, NULL},
	 { (char *)"GetListContents", _wrap_GetListContents, METH_VARARGS, NULL},
	 { (char *)"IsKeyPressed", _wrap_IsKeyPressed, METH_VARARGS, NULL},
	 { (char *)"GetSubMenu", _wrap_GetSubMenu, METH_VARARGS, NULL},
	 { (char *)"GetMenuItemInfo", _wrap_GetMenuItemInfo, METH_VARARGS, NULL},
	 { (char *)"GetMenuItemCount", _wrap_GetMenuItemCount, METH_VARARGS, NULL},
	 { (char *)"GetMenuItemIndex", _wrap_GetMenuItemIndex, METH_VARARGS, NULL},
	 { (char *)"GetSystemMenu", _wrap_GetSystemMenu, METH_VARARGS, NULL},
	 { (char *)"GetMenuItemID", _wrap_GetMenuItemID, METH_VARARGS, NULL},
	 { (char *)"GetMenu", _wrap_GetMenu, METH_VARARGS, NULL},
	 { (char *)"SetWindowPos", _wrap_SetWindowPos, METH_VARARGS, NULL},
	 { (char *)"TabCtrl_SetCurFocus", _wrap_TabCtrl_SetCurFocus, METH_VARARGS, NULL},
	 { (char *)"TabCtrl_GetCurFocus", _wrap_TabCtrl_GetCurFocus, METH_VARARGS, NULL},
	 { (char *)"TabCtrl_SetCurSel", _wrap_TabCtrl_SetCurSel, METH_VARARGS, NULL},
	 { (char *)"TabCtrl_GetItemCount", _wrap_TabCtrl_GetItemCount, METH_VARARGS, NULL},
	 { (char *)"SendRawKey", _wrap_SendRawKey, METH_VARARGS, NULL},
	 { (char *)"WindowFromPoint", _wrap_WindowFromPoint, METH_VARARGS, NULL},
	 { (char *)"AttachWin", _wrap_AttachWin, METH_VARARGS, NULL},
	 { (char *)"new_DibSect", _wrap_new_DibSect, METH_VARARGS, NULL},
	 { (char *)"delete_DibSect", _wrap_delete_DibSect, METH_VARARGS, NULL},
	 { (char *)"DibSect_Destroy", _wrap_DibSect_Destroy, METH_VARARGS, NULL},
	 { (char *)"DibSect_Load", _wrap_DibSect_Load, METH_VARARGS, NULL},
	 { (char *)"DibSect_SaveAs", _wrap_DibSect_SaveAs, METH_VARARGS, NULL},
	 { (char *)"DibSect_Invert", _wrap_DibSect_Invert, METH_VARARGS, NULL},
	 { (char *)"DibSect_ToGrayScale", _wrap_DibSect_ToGrayScale, METH_VARARGS, NULL},
	 { (char *)"DibSect_ToClipboard", _wrap_DibSect_ToClipboard, METH_VARARGS, NULL},
	 { (char *)"DibSect_CopyClient", _wrap_DibSect_CopyClient, METH_VARARGS, NULL},
	 { (char *)"DibSect_CopyWindow", _wrap_DibSect_CopyWindow, METH_VARARGS, NULL},
	 { (char *)"DibSect_swigregister", DibSect_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_DibSect = {"_p_DibSect", "DibSect *", 0, 0, 0};
static swig_type_info _swigt__p_HMENU = {"_p_HMENU", "HMENU *", 0, 0, 0};
static swig_type_info _swigt__p_HWND = {"_p_HWND", "HWND *", 0, 0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|LPARAM *", 0, 0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t = {"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t", "std::vector<std::string > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type = {"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type", "std::allocator<std::string > *|std::vector<std::string >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|WPARAM *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|DWORD *", 0, 0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DibSect,
  &_swigt__p_HMENU,
  &_swigt__p_HWND,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  &_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_DibSect[] = {  {&_swigt__p_DibSect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HMENU[] = {  {&_swigt__p_HMENU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HWND[] = {  {&_swigt__p_HWND, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t[] = {  {&_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DibSect,
  _swigc__p_HMENU,
  _swigc__p_HWND,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_size_type,
  _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            const char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                const char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    SWIGINTERN int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"SW_HIDE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"SW_NORMAL", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWNORMAL", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWMINIMIZED", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"SW_MAXIMIZE", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWMAXIMIZED", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWNOACTIVATE", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOW", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"SW_MINIMIZE", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWMINNOACTIVE", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWNA", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"SW_RESTORE", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"SW_SHOWDEFAULT", SWIG_From_int((int)(10))); 
    }
    {
        PyDict_SetItemString(d,"SW_FORCEMINIMIZE", SWIG_From_int((int)(11))); 
    }
    {
        PyDict_SetItemString(d,"SW_MAX", SWIG_From_int((int)(11))); 
    }
    {
        PyDict_SetItemString(d,"LVS_ICON", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"LVS_REPORT", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"LVS_SMALLICON", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"LVS_LIST", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"LVS_TYPEMASK", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"LVS_SINGLESEL", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"LVS_SHOWSELALWAYS", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"LVS_SORTASCENDING", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"LVS_SORTDESCENDING", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"LVS_SHAREIMAGELISTS", SWIG_From_int((int)(64))); 
    }
    {
        PyDict_SetItemString(d,"LVS_NOLABELWRAP", SWIG_From_int((int)(128))); 
    }
    {
        PyDict_SetItemString(d,"LVS_AUTOARRANGE", SWIG_From_int((int)(256))); 
    }
    {
        PyDict_SetItemString(d,"LVS_EDITLABELS", SWIG_From_int((int)(512))); 
    }
    {
        PyDict_SetItemString(d,"LVS_NOSCROLL", SWIG_From_int((int)(0x2000))); 
    }
    {
        PyDict_SetItemString(d,"LVS_TYPESTYLEMASK", SWIG_From_int((int)(0xfc00))); 
    }
    {
        PyDict_SetItemString(d,"LVS_ALIGNTOP", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"LVS_ALIGNLEFT", SWIG_From_int((int)(0x800))); 
    }
    {
        PyDict_SetItemString(d,"LVS_ALIGNMASK", SWIG_From_int((int)(0xc00))); 
    }
    {
        PyDict_SetItemString(d,"LVS_OWNERDRAWFIXED", SWIG_From_int((int)(0x400))); 
    }
    {
        PyDict_SetItemString(d,"LVS_NOCOLUMNHEADER", SWIG_From_int((int)(0x4000))); 
    }
    {
        PyDict_SetItemString(d,"LVS_NOSORTHEADER", SWIG_From_int((int)(0x8000))); 
    }
    {
        PyDict_SetItemString(d,"VK_LBUTTON", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"VK_RBUTTON", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"VK_CANCEL", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"VK_MBUTTON", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"VK_BACK", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"VK_TAB", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"VK_CLEAR", SWIG_From_int((int)(12))); 
    }
    {
        PyDict_SetItemString(d,"VK_RETURN", SWIG_From_int((int)(13))); 
    }
    {
        PyDict_SetItemString(d,"VK_SHIFT", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"VK_CONTROL", SWIG_From_int((int)(17))); 
    }
    {
        PyDict_SetItemString(d,"VK_MENU", SWIG_From_int((int)(18))); 
    }
    {
        PyDict_SetItemString(d,"VK_PAUSE", SWIG_From_int((int)(19))); 
    }
    {
        PyDict_SetItemString(d,"VK_CAPITAL", SWIG_From_int((int)(20))); 
    }
    {
        PyDict_SetItemString(d,"VK_KANA", SWIG_From_int((int)(0x15))); 
    }
    {
        PyDict_SetItemString(d,"VK_HANGEUL", SWIG_From_int((int)(0x15))); 
    }
    {
        PyDict_SetItemString(d,"VK_HANGUL", SWIG_From_int((int)(0x15))); 
    }
    {
        PyDict_SetItemString(d,"VK_JUNJA", SWIG_From_int((int)(0x17))); 
    }
    {
        PyDict_SetItemString(d,"VK_FINAL", SWIG_From_int((int)(0x18))); 
    }
    {
        PyDict_SetItemString(d,"VK_HANJA", SWIG_From_int((int)(0x19))); 
    }
    {
        PyDict_SetItemString(d,"VK_KANJI", SWIG_From_int((int)(0x19))); 
    }
    {
        PyDict_SetItemString(d,"VK_ESCAPE", SWIG_From_int((int)(0x1B))); 
    }
    {
        PyDict_SetItemString(d,"VK_CONVERT", SWIG_From_int((int)(0x1C))); 
    }
    {
        PyDict_SetItemString(d,"VK_NONCONVERT", SWIG_From_int((int)(0x1D))); 
    }
    {
        PyDict_SetItemString(d,"VK_ACCEPT", SWIG_From_int((int)(0x1E))); 
    }
    {
        PyDict_SetItemString(d,"VK_MODECHANGE", SWIG_From_int((int)(0x1F))); 
    }
    {
        PyDict_SetItemString(d,"VK_SPACE", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"VK_PRIOR", SWIG_From_int((int)(33))); 
    }
    {
        PyDict_SetItemString(d,"VK_NEXT", SWIG_From_int((int)(34))); 
    }
    {
        PyDict_SetItemString(d,"VK_END", SWIG_From_int((int)(35))); 
    }
    {
        PyDict_SetItemString(d,"VK_HOME", SWIG_From_int((int)(36))); 
    }
    {
        PyDict_SetItemString(d,"VK_LEFT", SWIG_From_int((int)(37))); 
    }
    {
        PyDict_SetItemString(d,"VK_UP", SWIG_From_int((int)(38))); 
    }
    {
        PyDict_SetItemString(d,"VK_RIGHT", SWIG_From_int((int)(39))); 
    }
    {
        PyDict_SetItemString(d,"VK_DOWN", SWIG_From_int((int)(40))); 
    }
    {
        PyDict_SetItemString(d,"VK_SELECT", SWIG_From_int((int)(41))); 
    }
    {
        PyDict_SetItemString(d,"VK_PRINT", SWIG_From_int((int)(42))); 
    }
    {
        PyDict_SetItemString(d,"VK_EXECUTE", SWIG_From_int((int)(43))); 
    }
    {
        PyDict_SetItemString(d,"VK_SNAPSHOT", SWIG_From_int((int)(44))); 
    }
    {
        PyDict_SetItemString(d,"VK_INSERT", SWIG_From_int((int)(45))); 
    }
    {
        PyDict_SetItemString(d,"VK_DELETE", SWIG_From_int((int)(46))); 
    }
    {
        PyDict_SetItemString(d,"VK_HELP", SWIG_From_int((int)(47))); 
    }
    {
        PyDict_SetItemString(d,"VK_LWIN", SWIG_From_int((int)(0x5B))); 
    }
    {
        PyDict_SetItemString(d,"VK_RWIN", SWIG_From_int((int)(0x5C))); 
    }
    {
        PyDict_SetItemString(d,"VK_APPS", SWIG_From_int((int)(0x5D))); 
    }
    {
        PyDict_SetItemString(d,"VK_SLEEP", SWIG_From_int((int)(0x5F))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD0", SWIG_From_int((int)(0x60))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD1", SWIG_From_int((int)(0x61))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD2", SWIG_From_int((int)(0x62))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD3", SWIG_From_int((int)(0x63))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD4", SWIG_From_int((int)(0x64))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD5", SWIG_From_int((int)(0x65))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD6", SWIG_From_int((int)(0x66))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD7", SWIG_From_int((int)(0x67))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD8", SWIG_From_int((int)(0x68))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMPAD9", SWIG_From_int((int)(0x69))); 
    }
    {
        PyDict_SetItemString(d,"VK_MULTIPLY", SWIG_From_int((int)(0x6A))); 
    }
    {
        PyDict_SetItemString(d,"VK_ADD", SWIG_From_int((int)(0x6B))); 
    }
    {
        PyDict_SetItemString(d,"VK_SEPARATOR", SWIG_From_int((int)(0x6C))); 
    }
    {
        PyDict_SetItemString(d,"VK_SUBTRACT", SWIG_From_int((int)(0x6D))); 
    }
    {
        PyDict_SetItemString(d,"VK_DECIMAL", SWIG_From_int((int)(0x6E))); 
    }
    {
        PyDict_SetItemString(d,"VK_DIVIDE", SWIG_From_int((int)(0x6F))); 
    }
    {
        PyDict_SetItemString(d,"VK_F1", SWIG_From_int((int)(0x70))); 
    }
    {
        PyDict_SetItemString(d,"VK_F2", SWIG_From_int((int)(0x71))); 
    }
    {
        PyDict_SetItemString(d,"VK_F3", SWIG_From_int((int)(0x72))); 
    }
    {
        PyDict_SetItemString(d,"VK_F4", SWIG_From_int((int)(0x73))); 
    }
    {
        PyDict_SetItemString(d,"VK_F5", SWIG_From_int((int)(0x74))); 
    }
    {
        PyDict_SetItemString(d,"VK_F6", SWIG_From_int((int)(0x75))); 
    }
    {
        PyDict_SetItemString(d,"VK_F7", SWIG_From_int((int)(0x76))); 
    }
    {
        PyDict_SetItemString(d,"VK_F8", SWIG_From_int((int)(0x77))); 
    }
    {
        PyDict_SetItemString(d,"VK_F9", SWIG_From_int((int)(0x78))); 
    }
    {
        PyDict_SetItemString(d,"VK_F10", SWIG_From_int((int)(0x79))); 
    }
    {
        PyDict_SetItemString(d,"VK_F11", SWIG_From_int((int)(0x7A))); 
    }
    {
        PyDict_SetItemString(d,"VK_F12", SWIG_From_int((int)(0x7B))); 
    }
    {
        PyDict_SetItemString(d,"VK_F13", SWIG_From_int((int)(0x7C))); 
    }
    {
        PyDict_SetItemString(d,"VK_F14", SWIG_From_int((int)(0x7D))); 
    }
    {
        PyDict_SetItemString(d,"VK_F15", SWIG_From_int((int)(0x7E))); 
    }
    {
        PyDict_SetItemString(d,"VK_F16", SWIG_From_int((int)(0x7F))); 
    }
    {
        PyDict_SetItemString(d,"VK_F17", SWIG_From_int((int)(0x80))); 
    }
    {
        PyDict_SetItemString(d,"VK_F18", SWIG_From_int((int)(0x81))); 
    }
    {
        PyDict_SetItemString(d,"VK_F19", SWIG_From_int((int)(0x82))); 
    }
    {
        PyDict_SetItemString(d,"VK_F20", SWIG_From_int((int)(0x83))); 
    }
    {
        PyDict_SetItemString(d,"VK_F21", SWIG_From_int((int)(0x84))); 
    }
    {
        PyDict_SetItemString(d,"VK_F22", SWIG_From_int((int)(0x85))); 
    }
    {
        PyDict_SetItemString(d,"VK_F23", SWIG_From_int((int)(0x86))); 
    }
    {
        PyDict_SetItemString(d,"VK_F24", SWIG_From_int((int)(0x87))); 
    }
    {
        PyDict_SetItemString(d,"VK_NUMLOCK", SWIG_From_int((int)(0x90))); 
    }
    {
        PyDict_SetItemString(d,"VK_SCROLL", SWIG_From_int((int)(0x91))); 
    }
    {
        PyDict_SetItemString(d,"VK_LSHIFT", SWIG_From_int((int)(0xA0))); 
    }
    {
        PyDict_SetItemString(d,"VK_RSHIFT", SWIG_From_int((int)(0xA1))); 
    }
    {
        PyDict_SetItemString(d,"VK_LCONTROL", SWIG_From_int((int)(0xA2))); 
    }
    {
        PyDict_SetItemString(d,"VK_RCONTROL", SWIG_From_int((int)(0xA3))); 
    }
    {
        PyDict_SetItemString(d,"VK_LMENU", SWIG_From_int((int)(0xA4))); 
    }
    {
        PyDict_SetItemString(d,"VK_RMENU", SWIG_From_int((int)(0xA5))); 
    }
    {
        PyDict_SetItemString(d,"VK_PROCESSKEY", SWIG_From_int((int)(0xE5))); 
    }
    {
        PyDict_SetItemString(d,"VK_ATTN", SWIG_From_int((int)(0xF6))); 
    }
    {
        PyDict_SetItemString(d,"VK_CRSEL", SWIG_From_int((int)(0xF7))); 
    }
    {
        PyDict_SetItemString(d,"VK_EXSEL", SWIG_From_int((int)(0xF8))); 
    }
    {
        PyDict_SetItemString(d,"VK_EREOF", SWIG_From_int((int)(0xF9))); 
    }
    {
        PyDict_SetItemString(d,"VK_PLAY", SWIG_From_int((int)(0xFA))); 
    }
    {
        PyDict_SetItemString(d,"VK_ZOOM", SWIG_From_int((int)(0xFB))); 
    }
    {
        PyDict_SetItemString(d,"VK_NONAME", SWIG_From_int((int)(0xFC))); 
    }
    {
        PyDict_SetItemString(d,"VK_PA1", SWIG_From_int((int)(0xFD))); 
    }
    {
        PyDict_SetItemString(d,"VK_OEM_CLEAR", SWIG_From_int((int)(0xFE))); 
    }
    {
        PyDict_SetItemString(d,"KEYEVENTF_EXTENDEDKEY", SWIG_From_int((int)(0x00000001))); 
    }
    {
        PyDict_SetItemString(d,"KEYEVENTF_KEYUP", SWIG_From_int((int)(00000002))); 
    }
    {
        PyDict_SetItemString(d,"GWL_ID", SWIG_From_int((int)((-12)))); 
    }
    {
        PyDict_SetItemString(d,"GWL_STYLE", SWIG_From_int((int)((-16)))); 
    }
    {
        PyDict_SetItemString(d,"GWL_EXSTYLE", SWIG_From_int((int)((-20)))); 
    }
    {
        PyDict_SetItemString(d,"WM_MOUSEACTIVATE", SWIG_From_int((int)(33))); 
    }
    {
        PyDict_SetItemString(d,"WM_MOUSEMOVE", SWIG_From_int((int)(512))); 
    }
    {
        PyDict_SetItemString(d,"WM_LBUTTONDOWN", SWIG_From_int((int)(513))); 
    }
    {
        PyDict_SetItemString(d,"WM_LBUTTONUP", SWIG_From_int((int)(514))); 
    }
    {
        PyDict_SetItemString(d,"WM_LBUTTONDBLCLK", SWIG_From_int((int)(515))); 
    }
    {
        PyDict_SetItemString(d,"WM_RBUTTONDOWN", SWIG_From_int((int)(516))); 
    }
    {
        PyDict_SetItemString(d,"WM_RBUTTONUP", SWIG_From_int((int)(517))); 
    }
    {
        PyDict_SetItemString(d,"WM_RBUTTONDBLCLK", SWIG_From_int((int)(518))); 
    }
    {
        PyDict_SetItemString(d,"WM_MBUTTONDOWN", SWIG_From_int((int)(519))); 
    }
    {
        PyDict_SetItemString(d,"WM_MBUTTONUP", SWIG_From_int((int)(520))); 
    }
    {
        PyDict_SetItemString(d,"WM_MBUTTONDBLCLK", SWIG_From_int((int)(521))); 
    }
    {
        PyDict_SetItemString(d,"WM_MOUSEWHEEL", SWIG_From_int((int)(522))); 
    }
    {
        PyDict_SetItemString(d,"WM_MOUSEFIRST", SWIG_From_int((int)(512))); 
    }
    {
        PyDict_SetItemString(d,"WM_COMMAND", SWIG_From_int((int)(273))); 
    }
    {
        PyDict_SetItemString(d,"WM_SYSCOMMAND", SWIG_From_int((int)(274))); 
    }
    {
        PyDict_SetItemString(d,"TCM_FIRST", SWIG_From_int((int)(0x1300))); 
    }
    {
        PyDict_SetItemString(d,"TCM_SETCURFOCUS", SWIG_From_int((int)((0x1300+48)))); 
    }
    {
        PyDict_SetItemString(d,"DIBSECT_H", SWIG_From_int((int)(1))); 
    }
}

